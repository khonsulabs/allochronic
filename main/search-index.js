var searchIndex = JSON.parse('{\
"allochronic":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"allochronic_util":{"doc":"TODO","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,14,11,11,11,11,11,11,5],"n":["PollOnce","Yield","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","into_future","into_future","new","new","poll","poll","poll","select","try_from","try_from","try_into","try_into","type_id","type_id","yield"],"q":["allochronic_util","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>Poll</code>s a [<code>Future</code>] a single time, returning [<code>Poll</code>]. See […","Yields to the executor once. See [<code>yield</code>] for easier usage.","","","","","","","","","","","","","Builds a new [<code>PollOnce</code>].","Builds a new [<code>Yield</code>].","<code>Poll</code>s a [<code>Future</code>] a single time, returning [<code>Poll</code>].","","","Polls all passed <code>Future</code>s or <code>Stream</code>s until one is ready …","","","","","","","Yields to the executor once."],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,1,2,0,1,2,1,2,1,2,0],"f":[null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["future",8]],[["future",8],["pollonce",3]]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["yield",3]]],"p":[[3,"PollOnce"],[3,"Yield"]]},\
"allochronic_util_macros":{"doc":"Proc-Macros for the <code>allochronic-util</code> crate.","t":[14],"n":["select"],"q":["allochronic_util_macros"],"d":["Polls all passed <code>Future</code>s or <code>Stream</code>s until one is ready …"],"i":[0],"f":[null],"p":[]}\
}');
initSearch(searchIndex);